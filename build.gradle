plugins {
    id("com.github.spotbugs") version "6.0.22"
    id("java-library")
    id("maven-publish")
    id("checkstyle")
    id("signing")
    id("jacoco")
    id("pmd")
    id("project-report")
    //id("org.gradlex.extra-java-module-info") version "1.3"
}

allprojects {
    group = "ninja.javahacker.jpasimpletransactions"
    version = "1.1.0-2024.10.13"
}

def versionJavaCompiler = "17"
def doclint = true

def versionApiguardian = "1.1.2"
def versionAsm         = "9.7"
def versionCheckstyle  = "10.18.2"
def versionEclipselink = "5.0.0-B03"
def versionSbContrib   = "7.6.5"
def versionFindSecBugs = "1.13.0"
def versionHibernate   = "7.0.0.Beta1"
def versionHsqldb      = "2.7.3"
def versionJaCoCo      = "0.8.12"
def versionJaxb        = "4.0.5"
def versionJcip        = "1.0-1"
def versionJakartaAnno = "3.0.0"
def versionJakartaCdi  = "4.1.0"
def versionJakartaEl   = "6.0.1"
def versionJakartaInj  = "2.0.1"
def versionJakartaInt  = "2.2.0"
def versionJakartaJpa  = "3.2.0"
def versionJakartaJta  = "2.0.1"
def versionJBossLog    = "3.6.1.Final"
def versionJunit       = "5.11.2"
def versionJunitPlatf  = "1.11.2"
def versionLombok      = "1.18.34"
def versionOpenJpa     = "4.0.1"
def versionPmd         = "7.6.0"
def versionSpotBugs    = "4.8.6"
def versionSlf4j       = "2.0.16"

def versionMocker          = version
def versionReifiedGenerics = version

println("Using Java " + org.gradle.api.JavaVersion.current() + ".")

allprojects {
    configurations {
        scm
        doc {
            transitive(false)
        }
    }

    repositories {
        flatDir {
            dirs("libs")
        }
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
    }
}

subprojects {
    apply(plugin: "com.github.spotbugs")
    apply(plugin: "java-library")
    apply(plugin: "maven-publish")
    apply(plugin: "checkstyle")
    apply(plugin: "signing")
    apply(plugin: "jacoco")
    apply(plugin: "pmd")
    apply(plugin: "project-report")

    dependencies {

        // JPA
        api(group: "jakarta.annotation", name: "jakarta.annotation-api", version: versionJakartaAnno)
        api(group: "jakarta.enterprise", name: "jakarta.enterprise.cdi-api", version: versionJakartaCdi)
        api(group: "jakarta.enterprise", name: "jakarta.enterprise.lang-model", version: versionJakartaCdi)
        api(group: "jakarta.persistence", name: "jakarta.persistence-api", version: versionJakartaJpa)
        api(group: "jakarta.transaction", name: "jakarta.transaction-api", version: versionJakartaJta)
        api(group: "jakarta.inject", name: "jakarta.inject-api", version: versionJakartaInj)
        api(group: "jakarta.interceptor", name: "jakarta.interceptor-api", version: versionJakartaInt)
        api(group: "jakarta.el", name: "jakarta.el-api", version: versionJakartaEl)

        // Lombok
        annotationProcessor    (group: "org.projectlombok", name: "lombok", version: versionLombok)
        compileOnlyApi         (group: "org.projectlombok", name: "lombok", version: versionLombok)
        testAnnotationProcessor(group: "org.projectlombok", name: "lombok", version: versionLombok)
        testCompileOnly        (group: "org.projectlombok", name: "lombok", version: versionLombok)

        // Reified-Generics
        api(group: "ninja.javahacker", name: "reified-generic", version: versionReifiedGenerics)

        // SpotBugs + plugins
        spotbugs(group: "com.github.spotbugs", name: "spotbugs", version: versionSpotBugs)
        spotbugs(group: "org.slf4j", name: "slf4j-api", version: versionSlf4j)
        spotbugs(group: "org.slf4j", name: "slf4j-simple", version: versionSlf4j)
        spotbugs(configurations.spotbugsPlugins.dependencies)
        spotbugs(configurations.apiElements.dependencies)
        compileOnlyApi(group: "com.github.stephenc.jcip", name: "jcip-annotations", version: versionJcip)
        compileOnlyApi(group: "com.github.spotbugs", name: "spotbugs-annotations", version: versionSpotBugs)
        spotbugsPlugins(group: "com.h3xstream.findsecbugs", name: "findsecbugs-plugin", version: versionFindSecBugs)
        spotbugsPlugins(group: "com.mebigfatguy.sb-contrib", name: "sb-contrib", version: versionSbContrib)
    }

    //extraJavaModuleInfo {
        //automaticModule("org.eclipse.persistence.jpa.jar", "org.eclipse.persistence.jpa")
    //}

    //configurations.all {
        //exclude(group: "commons-logging", module: "commons-logging")
    //}

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.debug = true
        options.fork = true
        options.compilerArgs << "-parameters"
        options.compilerArgs << "-Xlint:all,-processing,-requires-transitive-automatic,-requires-automatic,-missing-explicit-ctor"
        options.compilerArgs << "-Xmaxwarns" << "1000"
        options.compilerArgs << "-Xmaxerrs" << "1000"
        doFirst {
            options.compilerArgs += [
                "--module-path", classpath.asPath
            ]
            classpath = files()
        }
    }

    compileJava {
        sourceCompatibility = versionJavaCompiler
        targetCompatibility = versionJavaCompiler
        if (doclint) {
            options.compilerArgs << "-Xdoclint:all/protected"
        } else {
            options.compilerArgs << "-Xdoclint:none"
        }
    }

    compileTestJava {
        sourceCompatibility = org.gradle.api.JavaVersion.current()
        targetCompatibility = org.gradle.api.JavaVersion.current()
        options.compilerArgs << "-Xdoclint:none"
    }

    task delombok {
        description = "Delomboks the source code."
        doLast {
            configurations {
                delombokAll {
                    extendsFrom(compileClasspath)
                    extendsFrom(runtimeClasspath)
                    canBeResolved = true
                }
            }
            def delombokPath = "${configurations.delombokAll.asPath};"
            ant.mkdir(dir: "build/src-delomboked")
            ant.taskdef(name: "delombok", classname: "lombok.delombok.ant.Tasks\$Delombok", classpath: delombokPath)
            ant.delombok(verbose: "false", encoding: "UTF-8", to: "build/src-delomboked", from: "src/main/java", modulepath: delombokPath)
        }
    }

    javadoc {
        dependsOn(delombok)
        source = ["build/src-delomboked"]
        options.encoding = "UTF-8"
        options.charSet = "UTF-8"
        options.docEncoding = "UTF-8"
        options.docTitle = "${project.name} API"
        options.windowTitle = "${project.name} API"
        options.header = "<b>${project.name}</b>"
        options.addBooleanOption("html5", true)
        options.tags = ["apiNote:a:API Note:", "implSpec:a:Implementation Requirements:", "implNote:a:Implementation Note:"]
        //if (doclint) {
        //    options.addBooleanOption("Xdoclint:all/protected", true)
        //} else {
            options.addBooleanOption("Xdoclint:none", true)
        //}
        options.addStringOption("Xmaxerrs", "1000")
        options.addStringOption("Xmaxwarns", "1000")
        doFirst {
            options.modulePath += classpath
            classpath = files()
        }
    }

    checkstyleMain {
        configFile = rootProject.file("${rootDir}/config/checkstyle/main.xml")
    }

    checkstyleTest {
        configFile = rootProject.file("${rootDir}/config/checkstyle/test.xml")
    }

    checkstyle {
        toolVersion = versionCheckstyle
        configProperties = [
            "checkstyle.cache.file": "${buildDir}/checkstyle.cache",
        ]
        ignoreFailures = false
        showViolations = true
    }

    pmd {
        toolVersion = versionPmd
        ignoreFailures = true
    }

    spotbugs {
        toolVersion = versionSpotBugs
        effort = com.github.spotbugs.snom.Effort.MAX
        reportLevel = com.github.spotbugs.snom.Confidence.valueOf("LOW")
        omitVisitors = ["WeakExceptionMessaging", "OverlyPermissiveMethod"]
        ignoreFailures = true
    }

    tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
        reports {
            xml.required = false
            html.required = true
        }
    }

    jar {
        duplicatesStrategy = "exclude"
    }

    task sourcesJar(type: Jar) {
        from(sourceSets.main.allSource)
        archiveClassifier = "sources"
    }

    task javadocJar(type: Jar) {
        dependsOn(javadoc)
        dependsOn(sourcesJar)
        archiveClassifier = "javadoc"
    }

    test {
        useJUnitPlatform()
        finalizedBy(jacocoTestReport)
        ignoreFailures = false
        defaultCharacterEncoding = "UTF-8"
        testLogging.showStandardStreams = true
    }

    jacoco {
        toolVersion = versionJaCoCo
    }

    jacocoTestReport {
        dependsOn(test)
        reports {
            xml.required = false
            csv.required = false
            html.required = true
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from(components.java)
                artifact(sourcesJar)
                artifact(javadocJar)
                pom {
                    developers {
                        developer {
                            name = "Victor Williams Stafusa da Silva"
                            email = "victorwssilva@gmail.com"
                        }
                    }
                }
            }
        }
        repositories {
            mavenLocal()
        }
    }

    spotbugsTest.enabled = false
    pmdTest.enabled = false
}

task mergedJavadoc(type: Javadoc) {
    dependsOn(":core:delombok")
    dependsOn(":ninjadao:delombok")
    dependsOn(":hibernate:delombok")
    dependsOn(":eclipselink:delombok")
    dependsOn(":openjpa:delombok")
    description = "Creates Javadoc from all the projects."
    title = "All modules"
    destinationDir = new File(project.buildDir, "merged-javadoc")

    // Note: The closures below are executed lazily.
    source {
       subprojects*.sourceSets*.main*.delombokAll
    }
    classpath.from {
        subprojects*.configurations*.compile*.copyRecursive({ !(it instanceof ProjectDependency); })*.resolve()
    }
}

project(":core") {
    def moduleName = "ninja.javahacker.jpasimpletransactions.core"
    description = "JPA Simple Transactions Core"
    jar {
        archiveBaseName = "jpa-simple-transactions-core"
        inputs.property("moduleName", moduleName)
    }
}

project(":ninjadao") {
    def moduleName = "ninja.javahacker.ninjadao"
    description = "Ninja DAO"
    jar {
        archiveBaseName = "ninjadao"
        inputs.property("moduleName", moduleName)
    }
    dependencies {
        api(project(":core"))
    }
    compileJava {
        dependsOn(":core:jar")
    }
}

project(":hibernate") {
    def moduleName = "ninja.javahacker.jpasimpletransactions.hibernate"
    description = "JPA Simple Transactions for Hibernate"
    jar {
        archiveBaseName = "jpa-simple-transactions-hibernate"
        inputs.property("moduleName", moduleName)
    }
    dependencies {
        api(project(":core"))
        doc(project(":core"))

        // Hibernate.
        api(group: "org.hibernate.orm", name: "hibernate-core", version: versionHibernate)

        // JAXB.
        testRuntimeOnly(group: "org.glassfish.jaxb", name: "jaxb-runtime", version: versionJaxb)
        testRuntimeOnly(group: "org.glassfish.jaxb", name: "jaxb-core"   , version: versionJaxb)

        // JBoss Logging
        api(group: "org.jboss.logging", name: "jboss-logging", version: versionJBossLog)
    }
    compileJava {
        dependsOn(":core:jar")
    }
}

project(":eclipselink") {
    def moduleName = "ninja.javahacker.jpasimpletransactions.eclipselink"
    description = "JPA Simple Transactions for Eclipselink"
    jar {
        archiveBaseName = "jpa-simple-transactions-eclipselink"
        inputs.property("moduleName", moduleName)
    }
    dependencies {
        api(project(":core"))
        doc(project(":core"))

        // EclipseLink.
        api(group: "org.eclipse.persistence", name: "org.eclipse.persistence.jpa", version: versionEclipselink)
    }
    compileJava {
        dependsOn(":core:jar")
    }
}

project(":openjpa") {
    def moduleName = "ninja.javahacker.jpasimpletransactions.openjpa"
    description = "JPA Simple Transactions for OpenJPA"
    jar {
        archiveBaseName = "jpa-simple-transactions-openjpa"
        inputs.property("moduleName", moduleName)
    }
    dependencies {
        api(project(":core"))
        doc(project(":core"))

        // OpenJPA.
        api(group: "org.apache.openjpa", name: "openjpa", version: versionOpenJpa) {
            //exclude(group: "org.apache.geronimo.specs", module: "geronimo-jpa_2.2_spec")
            exclude(group: "org.apache.geronimo.specs", module: "geronimo-jta_1.1_spec")
            //exclude(group: "org.apache.geronimo.specs", module: "geronimo-jms_1.1_spec")
        }
    }
    compileJava {
        dependsOn(":core:jar")
    }
}

project(":tests") {
    def moduleName = "ninja.javahacker.jpasimpletransactions.tests"
    description = "JPA Simple Transactions unit tests"
    jar {
        archiveBaseName = "jpa-simple-transactions-tests"
        inputs.property("moduleName", moduleName)
    }
    dependencies {
        testImplementation(project(":core"))
        testImplementation(project(":ninjadao"))
        testImplementation(project(":hibernate"))
        testImplementation(project(":eclipselink"))
        testImplementation(project(":openjpa"))

        // JUnit
        testImplementation(group: "org.junit.platform", name: "junit-platform-launcher", version: versionJunitPlatf)
        testImplementation(group: "org.junit.jupiter", name: "junit-jupiter-api", version: versionJunit)
        testImplementation(group: "org.junit.jupiter", name: "junit-jupiter-params", version: versionJunit)
        testImplementation(group: "org.junit.jupiter", name: "junit-jupiter-engine", version: versionJunit)
        testImplementation(group: "org.apiguardian", name: "apiguardian-api", version: versionApiguardian)

        // HSQLDB.
        testImplementation(group: "org.hsqldb", name: "hsqldb", version: versionHsqldb)

        // Mocker.
        testImplementation(group: "ninja.javahacker", name: "mocker", version: versionMocker)
    }
    compileTestJava {
        dependsOn(":core:jar")
        dependsOn(":ninjadao:jar")
        dependsOn(":hibernate:jar")
        dependsOn(":eclipselink:jar")
        dependsOn(":openjpa:jar")
    }
    delombok.enabled = false
    javadoc.enabled = false
}

/*project(":javax-jakarta-persistence") {
    def moduleName = "ninja.javahacker.javaxjakarta.persistence"
    description = "Convert javax.persistence to jakarta.persistence Objects."
    jar {
        archiveBaseName = "javax-jakarta-persistence"
        inputs.property("moduleName", moduleName)
    }
    dependencies {
        // Javax persistence.
        api(group: "javax.persistence", name: "javax.persistence-api", version: versionJavaxJpa)
    }
    compileJava {
        dependsOn(":core:jar")
    }
}*/