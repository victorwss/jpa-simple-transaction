plugins {
    id "com.github.spotbugs" version "4.0.5"
    id "java-library"
    id "maven-publish"
    id "checkstyle"
    id "signing"
    id "jacoco"
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

allprojects {
    group = "ninja.javahacker.jpasimpletransactions"
    version = "0.5.0-b20200406"

    ext.javaCompiler = "13"
    ext.doclint = false
    ext.extraCompilerArgs = [
        "--add-opens", "jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
        "--add-opens", "jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
    ]

    ext.versionApiguardian = "1.1.0"
    ext.versionCheckstyle = "8.31"
    ext.versionEclipselink = "2.7.6"
    ext.versionSbContrib = "7.4.7"
    ext.versionFindSecBugs = "1.10.1"
    ext.versionHibernate = "5.4.13.Final" //"6.0.0.Alpha4"
    ext.versionHsqldb = "2.5.0"
    ext.versionJaCoCo = "0.8.5"
    ext.versionJaxb = "2.4.0-b180830.0359"
    ext.versionJcip = "1.0"
    ext.versionJakartaJpa = "2.2.3"
    ext.versionJunit = "5.6.1"
    ext.versionJsr305 = "3.0.2"
    ext.versionLombok = "1.18.12"
    ext.versionMocker = "1.0.1-b20200406"
    ext.versionOpenJpa = "3.1.1"
    ext.versionPmd = "6.22.0"
    ext.versionReifiedGenerics = "1.0.1-b20200406"
    ext.versionSpotBugs = "4.0.1"
}

println "Using Java " + org.gradle.api.JavaVersion.current() + "."

subprojects {
    apply plugin: "com.github.spotbugs"
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "checkstyle"
    apply plugin: "signing"
    apply plugin: "jacoco"

    repositories {
        flatDir {
            dirs 'libs'
        }
        mavenLocal()
        jcenter()
        mavenCentral()
    }

    dependencies {

        // JPA
        api group: 'jakarta.persistence', name: 'jakarta.persistence-api', version: versionJakartaJpa

        // JUnit
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versionJunit
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versionJunit
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versionJunit
        testCompileOnly group: 'org.apiguardian', name: 'apiguardian-api', version: versionApiguardian

        // Lombok
        if (versionLombok != "edge") {
            annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versionLombok
            compileOnly group: 'org.projectlombok', name: 'lombok', version: versionLombok
            testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versionLombok
            testCompileOnly group: 'org.projectlombok', name: 'lombok', version: versionLombok
        } else {
            annotationProcessor files("../libs/lombok-edge.jar")
            compileOnly files("../libs/lombok-edge.jar")
            testAnnotationProcessor files("../libs/lombok-edge.jar")
            testCompileOnly files("../libs/lombok-edge.jar")
        }

        // PMD
        compileOnly group: 'net.sourceforge.pmd', name: 'pmd', version: versionPmd
        testCompileOnly group: 'net.sourceforge.pmd', name: 'pmd', version: versionPmd

        // Reified-Generics
        api group: 'ninja.javahacker', name: 'reified-generic', version: versionReifiedGenerics

        // SpotBugs + plugins
        spotbugs group: 'com.github.spotbugs', name: 'spotbugs', version :versionSpotBugs
        spotbugs configurations.spotbugsPlugins.dependencies
        api group: 'net.jcip', name: 'jcip-annotations', version: versionJcip
        api group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: versionSpotBugs
        spotbugsPlugins group: 'com.h3xstream.findsecbugs', name: 'findsecbugs-plugin', version: versionFindSecBugs
        spotbugsPlugins group: 'com.mebigfatguy.sb-contrib', name: 'sb-contrib', version: versionSbContrib
    }

    task createFolders(description: 'Creates the source folders if they do not exist.') doLast {
        sourceSets*.allSource*.srcDirs*.each { File srcDir ->
            if (!srcDir.isDirectory()) {
                println "Creating source folder: ${srcDir}"
                srcDir.mkdirs()
            }
        }
    }

    checkstyleMain {
        configFile = rootProject.file("${rootDir}/config/checkstyle/main.xml")
    }

    checkstyleTest {
        configFile = rootProject.file("${rootDir}/config/checkstyle/test.xml")
    }

    checkstyle {
        toolVersion = versionCheckstyle
        configProperties = [
            "checkstyle.cache.file": "${buildDir}/checkstyle.cache",
        ]
        ignoreFailures = true
        showViolations = true
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = javaCompiler
        targetCompatibility = javaCompiler
        options.encoding = 'UTF-8'
        options.debug = true
        options.fork = true
        options.compilerArgs << "-parameters" << "-Xlint:all,-processing"
        extraCompilerArgs.each { e -> options.compilerArgs << e }
    }

    compileJava {
        if (doclint) options.compilerArgs << "-Xdoclint:all"
        sourceSets {
            main.java.srcDirs = ['src/main/java']
            main.resources.srcDirs = ['src/main/resources']
        }
    }

    /*task delombok {
        description 'Delomboks the source code'
        ant.taskdef(classname: 'lombok.delombok.ant.Tasks$Delombok', classpath: configurations.compileOnly.asPath, name: 'delombok')
        ant.mkdir(dir: 'build/src-delomboked')
        ant.delombok(verbose: 'true', encoding: 'UTF-8', to: 'build/src-delomboked', from: 'src/main/java')
    }*/

    tasks.withType(Javadoc) {
        //dependsOn delombok
        /*sourceSets {
            main.java.srcDirs = ['build/src-delomboked']
            main.resources.srcDirs = ['src/resources']
        }*/
        options.encoding = "UTF-8"
        options.docEncoding = "UTF-8"
        options.addBooleanOption('html5', true)
        options.tags = ["apiNote:a:API Note:", "implSpec:a:Implementation Requirements:", "implNote:a:Implementation Note:"]
    }

    spotbugs {
        toolVersion = versionSpotBugs
        effort = "max"
        reportLevel = "low"
        omitVisitors = ["WeakExceptionMessaging", "OverlyPermissiveMethod"]
    }

    tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    spotbugsTest.enabled = false
    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier "sources"
    }

    task javadocJar(type: Jar) {
        from javadoc
        classifier "javadoc"
    }

    test {
        useJUnitPlatform()
    }

    jacoco {
        toolVersion = versionJaCoCo
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination file("${buildDir}/jacocoHtml")
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId jar.baseName
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    developers {
                        developer {
                            name = 'Victor Williams Stafusa da Silva'
                            email = 'victorwssilva@gmail.com'
                        }
                    }
                }
            }
        }
        repositories {
            mavenLocal()
        }
    }
}

task mergedJavadoc(type: Javadoc, description: 'Creates Javadoc from all the projects.') {
    title = 'All modules'
    destinationDir = new File(project.buildDir, 'merged-javadoc')

    // Note: The closures below are executed lazily.
    source {
       subprojects*.sourceSets*.main*.allSource
    }
    classpath.from {
        subprojects*.configurations*.compile*.copyRecursive({ !(it instanceof ProjectDependency); })*.resolve()
    }
}

project(':core') {
    ext.moduleName = "ninja.javahacker.jpasimpletransactions.core"
    jar {
        archiveBaseName = "jpa-simple-transactions-core"
        inputs.property("moduleName", moduleName)
        manifest {
            attributes("Automatic-Module-Name": moduleName)
        }
    }
}

project(':ninjadao') {
    ext.moduleName = "ninja.javahacker.ninjadao"
    jar {
        archiveBaseName = "ninjadao"
        inputs.property("moduleName", moduleName)
        manifest {
            attributes("Automatic-Module-Name": moduleName)
        }
    }
    dependencies {
        api project(':core')
    }
}

project(':hibernate') {
    ext.moduleName = "ninja.javahacker.jpasimpletransactions.hibernate"
    jar {
        archiveBaseName = "jpa-simple-transactions-hibernate"
        inputs.property("moduleName", moduleName)
        manifest {
            attributes("Automatic-Module-Name": moduleName)
        }
    }
    dependencies {
        api project(':core')

        // Hibernate.
        implementation group: 'org.hibernate', name: 'hibernate-core', version: versionHibernate
        //implementation group: 'org.hibernate.orm', name: 'hibernate-core', version: versionHibernate

        implementation('org.hibernate:hibernate-core:${versionHibernate}') {
            exclude group: 'javax.persistence', module: 'javax.persistence-api'
            //exclude group: 'org.junit.jupiter', module: 'junit-jupiter-engine'
            //exclude group: 'org.junit.jupiter', module: 'junit-vintage-engine'
        }

        /*implementation('org.hibernate.orm:hibernate-core:${versionHibernate}') {
            exclude group: 'javax.persistence', module: 'javax.persistence-api'
            exclude group: 'org.junit.jupiter', module: 'junit-jupiter-engine'
            exclude group: 'org.junit.jupiter', module: 'junit-vintage-engine'
        }*/
    }
}

project(':eclipselink') {
    ext.moduleName = "ninja.javahacker.jpasimpletransactions.eclipselink"
    jar {
        archiveBaseName = "jpa-simple-transactions-eclipselink"
        inputs.property("moduleName", moduleName)
        manifest {
            attributes("Automatic-Module-Name": moduleName)
        }
    }
    dependencies {
        api project(':core')

        // EclipseLink.
        implementation group: 'org.eclipse.persistence', name: 'org.eclipse.persistence.jpa', version: versionEclipselink
    }
}

project(':openjpa') {
    ext.moduleName = "ninja.javahacker.jpasimpletransactions.openjpa"
    jar {
        archiveBaseName = "jpa-simple-transactions-openjpa"
        inputs.property("moduleName", moduleName)
        manifest {
            attributes("Automatic-Module-Name": moduleName)
        }
    }
    dependencies {
        api project(':core')

        // OpenJPA.
        implementation group: 'org.apache.openjpa', name: 'openjpa', version: versionOpenJpa
    }
}

project(':tests') {
    ext.moduleName = "ninja.javahacker.jpasimpletransactions.tests"
    jar {
        baseName = "jpa-simple-transactions-tests"
        inputs.property("moduleName", moduleName)
        manifest {
            attributes("Automatic-Module-Name": moduleName)
        }
    }
    dependencies {
        testImplementation project(':core')
        testImplementation project(':hibernate')
        testImplementation project(':eclipselink')
        testImplementation project(':openjpa')

        // HSQLDB.
        testImplementation group: 'org.hsqldb', name: 'hsqldb', version: versionHsqldb

        // JAXB.
        testRuntimeOnly group: 'javax.xml.bind', name: 'jaxb-api', version: versionJaxb

        // Mocker.
        testImplementation group: 'ninja.javahacker', name: 'mocker', version: versionMocker
    }
}