buildscript {
    repositories {
        maven {
            url("https://plugins.gradle.org/m2/")
        }
    }
    dependencies {
        classpath("com.github.spotbugs.snom:spotbugs-gradle-plugin:5.0.5")
    }
}

plugins {
    id("com.github.spotbugs") version "5.0.5"
    id "java-library"
    id "maven-publish"
    id "checkstyle"
    id "signing"
    id "jacoco"
    id "pmd"
}

allprojects {
    group = "ninja.javahacker.jpasimpletransactions"
    version = "1.0.0-2022.02.01"
}

var versionJavaCompiler = "10"
var doclint = true

var versionApiguardian = "1.1.1"
var versionCheckstyle = "9.3"
var versionEclipselink = "2.7.9"     //"3.1.0-M1"
var versionSbContrib = "7.4.7"
var versionFindSecBugs = "1.11.0"
var versionHibernate = "5.5.7.Final" //"6.0.0.Alpha9"
var versionHsqldb = "2.6.0"
var versionJaCoCo = "0.8.7"
var versionJaxb = "2.4.0-b180830.0359"
var versionJcip = "1.0"
var versionJakartaJpa = "2.2.3"      //"3.0.0"
var versionJunit = "5.8.2"
var versionJsr305 = "3.0.2"
var versionLombok = "1.18.22"
var versionMocker = "1.1.0-2022.02.01"
var versionOpenJpa = "3.2.0"
var versionPmd = "6.38.0"
var versionReifiedGenerics = "1.1.0-2022.02.01"
var versionSpotBugs = "4.5.3"
var versionSlf4j = "2.0.0-alpha6"

// Do not change anything below here.

println("Using Java " + org.gradle.api.JavaVersion.current() + ".")

allprojects {
    configurations {
        scm
    }

    repositories {
        flatDir {
            dirs("libs")
        }
        mavenLocal()
        mavenCentral()
        if (versionLombok.indexOf("edge") >= 0) {
            maven {
                url("https://projectlombok.org/edge-releases")
            }
        }
    }
}

subprojects {
    apply(plugin: "com.github.spotbugs")
    apply(plugin: "java-library")
    apply(plugin: "maven-publish")
    apply(plugin: "checkstyle")
    apply(plugin: "signing")
    apply(plugin: "jacoco")
    apply(plugin: "pmd")

    dependencies {

        // JPA
        api(group: "jakarta.persistence", name: "jakarta.persistence-api", version: versionJakartaJpa)

        // JUnit
        testImplementation(group: "org.junit.jupiter", name: "junit-jupiter-api", version: versionJunit)
        testImplementation(group: "org.junit.jupiter", name: "junit-jupiter-params", version: versionJunit)
        testRuntimeOnly(group: "org.junit.jupiter", name: "junit-jupiter-engine", version: versionJunit)
        testCompileOnly(group: "org.apiguardian", name: "apiguardian-api", version: versionApiguardian)

        // Lombok
        annotationProcessor(group: "org.projectlombok", name: "lombok", version: versionLombok)
        compileOnlyApi(group: "org.projectlombok", name: "lombok", version: versionLombok)
        testAnnotationProcessor(group: "org.projectlombok", name: "lombok", version: versionLombok)
        testCompileOnly(group: "org.projectlombok", name: "lombok", version: versionLombok)

        // Reified-Generics
        api(group: "ninja.javahacker", name: "reified-generic", version: versionReifiedGenerics)

        // SpotBugs + plugins
        spotbugs(group: "com.github.spotbugs", name: "spotbugs", version: versionSpotBugs)
        spotbugs(group: "org.slf4j", name: "slf4j-api", version: versionSlf4j)
        spotbugs(group: "org.slf4j", name: "slf4j-simple", version: versionSlf4j)
        spotbugs(configurations.spotbugsPlugins.dependencies)
        compileOnlyApi(group: "net.jcip", name: "jcip-annotations", version: versionJcip)
        compileOnlyApi(group: "com.github.spotbugs", name: "spotbugs-annotations", version: versionSpotBugs)
        testCompileOnly(group: "net.jcip", name: "jcip-annotations", version: versionJcip)
        testCompileOnly(group: "com.github.spotbugs", name: "spotbugs-annotations", version: versionSpotBugs)
        spotbugsPlugins(group: "com.h3xstream.findsecbugs", name: "findsecbugs-plugin", version: versionFindSecBugs)
        spotbugsPlugins(group: "com.mebigfatguy.sb-contrib", name: "sb-contrib", version: versionSbContrib)
    }

    configurations.compileOnlyApi.setCanBeResolved(true)
    configurations.implementation.setCanBeResolved(true)
    configurations.testCompileOnly.setCanBeResolved(true)
    configurations.testImplementation.setCanBeResolved(true)

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.debug = true
        options.fork = true
        options.compilerArgs += [
            "-parameters",
            "-Xlint:all,-processing,-requires-transitive-automatic,-requires-automatic,-missing-explicit-ctor",
            "-Xmaxwarns",
            "1000",
            "-Xmaxerrs",
            "1000"
        ]
    }

    compileJava {
        sourceCompatibility = versionJavaCompiler
        targetCompatibility = versionJavaCompiler
        if (doclint) {
            options.compilerArgs << "-Xdoclint:all/protected"
        } else {
            options.compilerArgs << "-Xdoclint:none"
        }
        doFirst {
            options.compilerArgs += [
                "--module-path", classpath.asPath
            ]
            classpath = files()
        }
    }

    compileTestJava {
        sourceCompatibility = org.gradle.api.JavaVersion.current()
        targetCompatibility = org.gradle.api.JavaVersion.current()
        options.compilerArgs << "-Xdoclint:none"
    }

    task delombok {
        description = "Delomboks the source code."
        doLast {
            var delombokPath = "${configurations.compileOnlyApi.asPath};${configurations.implementation.asPath}"
            ant.mkdir(dir: "build/src-delomboked")
            ant.taskdef(name: "delombok", classname: "lombok.delombok.ant.Tasks\$Delombok", classpath: delombokPath)
            ant.delombok(verbose: "false", encoding: "UTF-8", to: "build/src-delomboked", from: "src/main/java", modulepath: delombokPath)
        }
    }

    tasks.withType(Javadoc) {
        dependsOn(delombok)
        source = ["build/src-delomboked"]
        options.encoding = "UTF-8"
        options.charSet = "UTF-8"
        options.docEncoding = "UTF-8"
        options.docTitle = "${project.name} API"
        options.windowTitle = "${project.name} API"
        options.header = "<b>${project.name}</b>"
        options.addBooleanOption("html5", true)
        options.tags = ["apiNote:a:API Note:", "implSpec:a:Implementation Requirements:", "implNote:a:Implementation Note:"]
        if (doclint) {
            //options.addBooleanOption("Xdoclint:all/protected", true)
        } else {
            options.addBooleanOption("Xdoclint:none", true)
        }
        options.addStringOption("Xmaxerrs", "1000")
        options.addStringOption("Xmaxwarns", "1000")
        doFirst {
            options.modulePath += classpath
            classpath = files()
        }
    }

    checkstyleMain {
        configFile = rootProject.file("${rootDir}/config/checkstyle/main.xml")
    }

    checkstyleTest {
        configFile = rootProject.file("${rootDir}/config/checkstyle/test.xml")
    }

    checkstyle {
        toolVersion = versionCheckstyle
        configProperties = [
            "checkstyle.cache.file": "${buildDir}/checkstyle.cache",
        ]
        ignoreFailures = true
        showViolations = true
    }

    pmd {
        toolVersion = versionPmd
        ignoreFailures = true
    }

    spotbugs {
        toolVersion = versionSpotBugs
        effort = "max"
        reportLevel = "low"
        omitVisitors = ["WeakExceptionMessaging", "OverlyPermissiveMethod"]
        ignoreFailures = true
    }

    tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
        reports {
            xml.required = false
            html.required = true
        }
    }

    jar {
        duplicatesStrategy = "exclude"
    }

    task sourcesJar(type: Jar) {
        from(sourceSets.main.allSource)
        classifier("sources")
    }

    task javadocJar(type: Jar) {
        from(javadoc)
        classifier("javadoc")
    }

    test {
        useJUnitPlatform()
        finalizedBy(jacocoTestReport)
        ignoreFailures = true
    }

    jacoco {
        toolVersion = versionJaCoCo
    }

    jacocoTestReport {
        dependsOn(test)
        reports {
            xml.required = false
            csv.required = false
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from(components.java)
                artifact(sourcesJar)
                artifact(javadocJar)
                pom {
                    developers {
                        developer {
                            name = "Victor Williams Stafusa da Silva"
                            email = "victorwssilva@gmail.com"
                        }
                    }
                }
            }
        }
        repositories {
            mavenLocal()
        }
    }

    spotbugsTest.enabled = false
    pmdTest.enabled = false
}

task mergedJavadoc(type: Javadoc) {
    description = "Creates Javadoc from all the projects."
    title = "All modules"
    destinationDir = new File(project.buildDir, "merged-javadoc")

    // Note: The closures below are executed lazily.
    source {
       subprojects*.sourceSets*.main*.allSource
    }
    classpath.from {
        subprojects*.configurations*.compile*.copyRecursive({ !(it instanceof ProjectDependency); })*.resolve()
    }
}

project(":core") {
    var moduleName = "ninja.javahacker.jpasimpletransactions.core"
    description = "JPA Simple Transactions Core"
    jar {
        archiveBaseName = "jpa-simple-transactions-core"
        inputs.property("moduleName", moduleName)
    }
}

project(":ninjadao") {
    var moduleName = "ninja.javahacker.ninjadao"
    description = "Ninja DAO"
    jar {
        archiveBaseName = "ninjadao"
        inputs.property("moduleName", moduleName)
    }
    dependencies {
        api(project(":core"))
    }
    compileJava {
        dependsOn(":core:jar")
    }
}

project(":hibernate") {
    var moduleName = "ninja.javahacker.jpasimpletransactions.hibernate"
    description = "JPA Simple Transactions for Hibernate"
    jar {
        archiveBaseName = "jpa-simple-transactions-hibernate"
        inputs.property("moduleName", moduleName)
    }
    dependencies {
        api(project(":core"))

        // Hibernate.
        implementation(group: "org.hibernate", name: "hibernate-core", version: versionHibernate) {
            exclude(group: "javax.persistence", module: "javax.persistence-api")
        }
    }
    compileJava {
        dependsOn(":core:jar")
    }
}

project(":eclipselink") {
    var moduleName = "ninja.javahacker.jpasimpletransactions.eclipselink"
    description = "JPA Simple Transactions for Eclipselink"
    jar {
        archiveBaseName = "jpa-simple-transactions-eclipselink"
        inputs.property("moduleName", moduleName)
    }
    dependencies {
        api(project(":core"))

        // EclipseLink.
        implementation(group: "org.eclipse.persistence", name: "org.eclipse.persistence.jpa", version: versionEclipselink) {
            exclude(group: "org.eclipse.persistence", module: "jakarta.persistence")
        }
    }
    compileJava {
        dependsOn(":core:jar")
    }
}

project(":openjpa") {
    var moduleName = "ninja.javahacker.jpasimpletransactions.openjpa"
    description = "JPA Simple Transactions for OpenJPA"
    jar {
        archiveBaseName = "jpa-simple-transactions-openjpa"
        inputs.property("moduleName", moduleName)
    }
    dependencies {
        api(project(":core"))

        // OpenJPA.
        implementation(group: "org.apache.openjpa", name: "openjpa", version: versionOpenJpa) {
            exclude(group: "org.apache.geronimo.specs", module: "geronimo-jpa_2.2_spec")
            exclude(group: "org.apache.geronimo.specs", module: "geronimo-jta_1.1_spec")
            exclude(group: "org.apache.geronimo.specs", module: "geronimo-jms_1.1_spec")
        }
    }
    compileJava {
        dependsOn(":core:jar")
    }
}

project(":tests") {
    var moduleName = "ninja.javahacker.jpasimpletransactions.tests"
    description = "JPA Simple Transactions unit tests"
    jar {
        archiveBaseName = "jpa-simple-transactions-tests"
        inputs.property("moduleName", moduleName)
    }
    dependencies {
        testImplementation(project(":core"))
        testImplementation(project(":ninjadao"))
        testImplementation(project(":hibernate"))
        testImplementation(project(":eclipselink"))
        testImplementation(project(":openjpa"))

        // HSQLDB.
        testImplementation(group: "org.hsqldb", name: "hsqldb", version: versionHsqldb)

        // JAXB.
        testRuntimeOnly(group: "javax.xml.bind", name: "jaxb-api", version: versionJaxb)

        // Mocker.
        testImplementation(group: "ninja.javahacker", name: "mocker", version: versionMocker)
    }
    compileJava {
        dependsOn(":core:jar")
        dependsOn(":ninjadao:jar")
        dependsOn(":hibernate:jar")
        dependsOn(":eclipselink:jar")
        dependsOn(":openjpa:jar")
    }
}