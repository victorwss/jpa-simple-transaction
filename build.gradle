buildscript {
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE"
    }
}

plugins {
    id "io.spring.dependency-management" version "1.0.5.RELEASE"
    id "com.github.johnrengelman.shadow" version "2.0.4"
    id "com.github.spotbugs" version "1.6.2"
}

group = "ninja.javahacker"
version = "0.3.0"
ext.moduleName = "ninja.javahacker.jpasimpletransactions"

ext.versionApiguardian = "1.0.0"
ext.versionCheckstyle = "8.10.1"
ext.versionFindSecBugs = "1.7.1"
ext.versionJcip = "1.0"
ext.versionJpa = "2.2"
ext.versionJunit = "5.2.0"
ext.versionJsr305 = "3.0.2"
ext.versionLombok = "1.18.0"
ext.versionPmd = "6.4.0"
ext.versionReifiedGenerics = "0.3.0"
ext.versionSpotBugs = "3.1.3"
ext.lombokEdge = false

apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'checkstyle'

checkstyle {
    toolVersion = "${versionCheckstyle}"
    configFile = rootProject.file("config/checkstyle/checkstyle.xml")
    configProperties = [
        "checkstyle.cache.file": "${buildDir}/checkstyle.cache",
    ]
    ignoreFailures = true
    showViolations = true
}

spotbugs {
    toolVersion = "${versionSpotBugs}"
}

repositories {
    flatDir {
        dirs 'libs'
    }
    mavenLocal()
    jcenter()
    mavenCentral()
}

dependencies {

    // Find Security Bugs
    compile group: 'com.h3xstream.findsecbugs', name: 'findsecbugs-plugin', version: "${versionFindSecBugs}"

    // JPA
    compile group: 'javax.persistence', name: 'javax.persistence-api', version: "${versionJpa}"

    // JUnit
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "${versionJunit}"
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "${versionJunit}"
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: "${versionJunit}"
    testCompileOnly group: 'org.apiguardian', name: 'apiguardian-api', version: "${versionApiguardian}"

    // Lombok
    if (!lombokEdge) {
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: "${versionLombok}"
        compileOnly group: 'org.projectlombok', name: 'lombok', version: "${versionLombok}"
        testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: "${versionLombok}"
        testCompileOnly group: 'org.projectlombok', name: 'lombok', version: "${versionLombok}"
    } else {
        annotationProcessor files("libs/lombok-edge.jar")
        compileOnly files("libs/lombok-edge.jar")
        testAnnotationProcessor files("libs/lombok-edge.jar")
        testCompileOnly files("libs/lombok-edge.jar")
    }

    // PMD
    compileOnly group: 'net.sourceforge.pmd', name: 'pmd', version: "${versionPmd}"
    testCompileOnly group: 'net.sourceforge.pmd', name: 'pmd', version: "${versionPmd}"

    // Reified-Generics
    compile group: 'ninja.javahacker', name: 'reified-generic', version: "${versionReifiedGenerics}"

    // SpotBugs
    compileOnly group: 'net.jcip', name: 'jcip-annotations', version: "${versionJcip}"
    compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: "${versionSpotBugs}"
    compileOnly group: 'com.google.code.findbugs', name: 'jsr305', version: "${versionJsr305}"
    testCompileOnly group: 'net.jcip', name: 'jcip-annotations', version: "${versionJcip}"
    testCompileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: "${versionSpotBugs}"
    testCompileOnly group: 'com.google.code.findbugs', name: 'jsr305', version: "${versionJsr305}"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.debug = true
    options.compilerArgs << "-parameters" << "-Xlint:all,-processing" // << "-Xdoclint:all"
    if (JavaVersion.current().isJava9Compatible()) {
        options.compilerArgs << "--add-modules" << "java.xml.ws.annotation"
        options.compilerArgs << "--add-opens" << "jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED"
        options.compilerArgs << "--add-opens" << "jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED"
        options.compilerArgs << "--add-opens" << "jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED"
        options.compilerArgs << "--add-opens" << "jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED"
        options.compilerArgs << "--add-opens" << "jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED"
        options.compilerArgs << "--add-opens" << "jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED"
        options.compilerArgs << "--add-opens" << "jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED"
        options.compilerArgs << "--add-opens" << "jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED"
        options.compilerArgs << "--add-opens" << "jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED"
    }
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier "sources"
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId "jpa-simple-transactions"
            from components.java

            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}

jar {
    duplicatesStrategy = "exclude"
    inputs.property("moduleName", moduleName)
    manifest {
        attributes("Automatic-Module-Name": moduleName)
    }
}

test {
    useJUnitPlatform()
}